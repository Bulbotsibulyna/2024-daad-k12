knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
install.packages("tidyverse")
install.packages("DESeq2")
install.packages("ashr")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
i_am("Differential-expression-Oleksandra.rmd")
install.packages("pacman")
install.packages("tidyverse")
install.packages("DESeq2")
install.packages("ashr")
install.packages("tidyverse")
install.packages("pacman")
pacman::p_load("here", "tidyverse", "DESeq2", "ashr")
i_am("Differential-expression-Oleksandra.rmd")
counts <- read.tsv("GCE262291_Gene_level_counts.txt", rownames = 1)
i_am("Differential-expression-Oleksandra.rmd")
counts <- read_tsv("GCE262291_Gene_level_counts.txt")
i_am("Differential-expression-Oleksandra.rmd")
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
View(counts)
i_am("Differential-expression-Oleksandra.rmd")
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
metadata <- read_tsv("GSE262291_trx_EGids_combined.txt")
View(metadata)
i_am("Differential-expression-Oleksandra.rmd")
counts_raw <- read_tsv("GSE262291_Gene_level_counts.txt")
metadata_raw <- read_tsv("GSE262291_trx_EGids_combined.txt")
ggplot(counts_raw, aes(x=Veh_21WB)) +
geom_density(color="darkblue", fill="lightblue")
#install.packages("pacman")
pacman::p_load("here", "tidyverse", "scales", "maEndToEnd", "pd.mogene.2.0.st", "oligo")
counts <- read.csv(here("01_data", "count_matrix_raw.csv"), row.names = 1)
i_am("Differential-expression-Oleksandra.rmd")
counts_raw <- read_tsv("GSE262291_Gene_level_counts.txt")
metadata_raw <- read_tsv("GSE262291_trx_EGids_combined.txt")
counts <- read_tsv("GSE262291_Gene_level_counts.txt", rownames = 2) %>% subset(counts, select = -c(ENTEREZID, product, kept))
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>% subset(counts, select = -c(ENTEREZID, product, kept))
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
counts <- counts[-c(ENTEREZID, product, kept)]
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
counts <- counts[-c(ENTREZID, product, kept)]
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
counts <- counts[-c("ENTREZID", "product", "kept")]
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
counts <- counts[c("ENTREZID", "product", "kept")]
counts
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>% select(-c("ENTREZID", "product", "kept"))
counts
View(counts_raw)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit()
counts
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
row.names(counts$symbol)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
row.names(counts, counts$symbol)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
rownames(counts, counts$symbol)
counts
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit()
counts
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(counts, var = "symbol")
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts
sample_data <- data.frame(col1 = c("Control", "Control", "Control", "Control", "Infected", "Infected", "Infected", "Infected", "Infected", "Infected"), row.names = c("Veh_21WB", "Veh_35WB", "Veh_36WB", "Veh_7WB", "Flu_18WB", "Flu_2WB", "Flu_38WB", "Flu_43WB", "Flu_52WB", "Flu_60WB"))
sample_data <- data.frame(col1 = c("Control", "Control", "Control", "Control", "Infected", "Infected", "Infected", "Infected", "Infected", "Infected"), row.names = c("Veh_21WB", "Veh_35WB", "Veh_36WB", "Veh_7WB", "Flu_18WB", "Flu_2WB", "Flu_38WB", "Flu_43WB", "Flu_52WB", "Flu_60WB"))
sample_data
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = "col1")
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
type(counts)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
type(counts[1, 1])
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
type(counts$Veh_21WB)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
type(counts$Veh_21WB[1])
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
type(counts$Veh_21WB["Wfdc17"])
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
counts$Veh_21WB["Wfdc17"]
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
counts$Veh_21WB[Wfdc17]
vignette("tibble")
counts$Veh_21WB[Wfdc17]
vignette("tibble")
type(counts)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design = -col1)
type(counts)
dds <- DESeqDataSetFromMatrix(countData = as.tibble(counts), colData = sample_data, design = -col1)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol") $>$
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol") %>%
as.tibble()
type(counts)
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
counts <- select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol") %>%
as.tibble()
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
counts <- select(-c("ENTREZID", "product", "kept")) %>% na.omit() %>% column_to_rownames(var = "symbol")
counts <- read_tsv("GSE262291_Gene_level_counts.txt")
counts <- select(-c("ENTREZID", "product", "kept"))
type(counts)
dds <- DESeqDataSetFromMatrix(countData = counts[-c("ENTREZID", "product", "kept")], colData = sample_data, design = -col1)
type(counts)
dds <- DESeqDataSetFromMatrix(countData = counts[-c("ENTREZID", "product", "kept")], colData = sample_data, design = col1)
type(counts)
dds <- DESeqDataSetFromMatrix(countData = counts[-c("ENTREZID", "product", "kept")], colData = sample_data, design = "col1")
dds <- DESeqDataSetFromMatrix(countData = counts[-c("ENTREZID", "product", "kept")], colData = sample_data, design = ~col1)
dds <- DESeqDataSetFromMatrix(countData = counts[-c("ENTREZID", "product", "kept")], colData = sample_data,
design = ~col1)
dds <- DESeqDataSetFromMatrix(countData = counts[-c("ENTREZID", "product", "kept")], colData = sample_data)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- counts[-c("ENTREZID", "product", "kept")]
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- counts[,-c("ENTREZID", "product", "kept")]
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- subset(data, select = -c("ENTREZID", "product", "kept"))
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- subset(counts, select = -c("ENTREZID", "product", "kept"))
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- subset(counts, select = -c(ENTREZID, product, kept))
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- subset(counts, select = -c('ENTREZID', 'product', 'kept'))
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- counts %>% select(-ENTREZID, -kept, -symbol)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- counts %>% select(-ENTREZID, -kept, -symbol)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- counts %>% dplyr::select(-ENTREZID, -kept, -symbol)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts_clean <- counts %>% dplyr::select(-ENTREZID, -kept, -symbol)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts_clean <- counts %>% dplyr::select(-c("ENTREZID", "product", "kept"))
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts
counts_clean <- counts %>% dplyr::select(-c("ENTREZID", "product", "kept"))
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
select(-c("ENTREZID", "product", "kept")) %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design= -col1)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- counts %>% dplyr::select(-ENTREZID, -kept, -symbol)
counts <- read_tsv("GSE262291_Gene_level_counts.txt") %>%
na.omit() %>%
column_to_rownames(var = "symbol")
counts <- counts %>% dplyr::select(-ENTREZID, -kept, -product)
counts
dds <- DESeqDataSetFromMatrix(countData = counts, colData = sample_data, design= -col1)
data <- read.table("SRR28424659.lite.1", header = TRUE, sep = "\t")
data <- read.csv("SRR28424659.lite.1", header = TRUE, sep = "\t")
data <- read.delim(gzfile("SRR28424659.lite.1"))
aliases <- readRDS("C:/Users/Sasha/AppData/Local/Temp/e860dc2f-15c8-4b20-b0c8-1228cecc7968_tximport_1.32.0.zip.968/tximport/help/aliases.rds")
knitr::opts_chunk$set(echo = TRUE)
install.packages("pacman")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
i_am("Differential-expression-Oleksandra.rmd")
i_am("differential-expression.rmd")
install.packages("pacman")
install.packages("tidyverse")
install.packages("DESeq2")
install.packages("tidyverse")
install.packages("pacman")
install.packages("ashr")
install.packages("BiocManager")
pacman::p_load("here", "tidyverse", "DESeq2", "ashr")
install.packages("BiocManager")
BiocManager::install("tximport")
i_am("differential-expression.rmd")
i_am("differential-expression.rmd")
library(tximportData)
BiocManager::install("tximportData")
i_am("differential-expression.rmd")
library(tximportData)
dir <- system.file("extdata", package = "tximportData")
list.files(dir)
samples <- read.table(file.path(dir, "samples.txt"), header = TRUE)
samples
kallisto
samples <- read.table(file.path(dir, "samples.txt"), header = TRUE)
files <- file.path(dir, "kallisto", samples$run, "abundance.tsv.gz")
names(files) <- paste0("sample", 1:6)
files
files <- here("Data")
files <- here("Data")
files
files <- files <- list.files(here("Data"), full.names = TRUE)
files
txi.kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE)
library("tximport")
txi.kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE)
library("tximport")
txi.kallisto.tsv <- tximport(files, type = "kallisto", ignoreAfterBar = TRUE)
?tximport
library("tximport")
txi.kallisto.tsv <- tximport(files, type = "kallisto", txOut = TRUE, ignoreAfterBar = TRUE)
head(txi.kallisto.tsv$counts)
library("tximport")
txi.kallisto.tsv <- tximport(files, type = "kallisto", txOut = TRUE, ignoreAfterBar = TRUE)
txi.kallisto.tsv
library("tximport")
txi.kallisto.tsv <- tximport(files, type = "kallisto", txOut = TRUE, ignoreAfterBar = TRUE)
txi.kallisto.tsv$counts
View(sample_data)
View(metadata)
View(metadata_raw)
library("tximport")
metadata <- read_tsv("GSE262291_trx_EGids_combined.txt")
tx2dene <- metadata %>% select(transcript_id, gene_id)
txi.kallisto.tsv <- tximport(files, type = "kallisto",
tx2gene = tx2gene,
countsFromAbundance="lengthScaledTPM",
ignoreAfterBar = TRUE)
library("tximport")
metadata <- read_tsv("GSE262291_trx_EGids_combined.txt")
tx2gene <- metadata %>% select(transcript_id, gene_id)
txi.kallisto.tsv <- tximport(files, type = "kallisto",
tx2gene = tx2gene,
countsFromAbundance="lengthScaledTPM",
ignoreAfterBar = TRUE)
library("tximport")
metadata <- read_tsv("GSE262291_trx_EGids_combined.txt")
tx2gene <- metadata %>% select(transcript_id, gene_id)
txi.kallisto.tsv <- tximport(files, type = "kallisto",
tx2gene = tx2gene,
countsFromAbundance="lengthScaledTPM",
ignoreAfterBar = TRUE,
ignoreTxVersion = TRUE)
library("tximport")
metadata <- read_tsv("GSE262291_trx_EGids_combined.txt")
tx2gene <- metadata %>% select(transcript_id, gene_id)
txi.kallisto.tsv <- tximport(files, type = "kallisto",
countsFromAbundance="lengthScaledTPM",
txOut = TRUE
ignoreAfterBar = TRUE,
library("tximport")
metadata <- read_tsv("GSE262291_trx_EGids_combined.txt")
tx2gene <- metadata %>% select(transcript_id, gene_id)
txi.kallisto.tsv <- tximport(files, type = "kallisto",
countsFromAbundance="lengthScaledTPM",
txOut = TRUE,
ignoreAfterBar = TRUE,
ignoreTxVersion = TRUE)
txi.kallisto.tsv$counts
files <- files <- list.files(here("Data"), full.names = TRUE)
names(files) <- paste0("sample", 1:6)
files
files <- files <- list.files(here("Data"), full.names = TRUE)
names(files) <- paste0("sample", 1:10)
files
library("tximport")
metadata <- read_tsv("GSE262291_trx_EGids_combined.txt")
tx2gene <- metadata %>% select(transcript_id, gene_id)
txi.kallisto.tsv <- tximport(files, type = "kallisto",
countsFromAbundance="lengthScaledTPM",
txOut = TRUE,
ignoreAfterBar = TRUE,
ignoreTxVersion = TRUE)
txi.kallisto.tsv$counts
sampleTable <- data.frame(condition = factor(rep(c("A", "B"), each = 3)))
rownames(sampleTable) <- colnames(txi.kallisto.tsv$counts)
sampleTable <- data.frame(condition = factor(rep(c("A", "B"), each = 5)))
rownames(sampleTable) <- colnames(txi.kallisto.tsv$counts)
dds <- DESeqDataSetFromTximport(txi.kallisto.tsv, sampleTable, ~condition)
sampleTable <- data.frame(condition = factor(rep(c("A", "B"), each = 5)))
rownames(sampleTable) <- colnames(txi.kallisto.tsv$counts)
dds <- DESeqDataSetFromTximport(txi.kallisto.tsv, sampleTable, ~condition)
dds <- DESeq(dds)
dds
head(dds)
tximport
?DESeqDataSetFromTximport
coldata <- data.frame(
row.names = c("sample1", "sample2", "sample3", "sample4", "sample5", "sample6", "sample7", "sample8", "sample9", "sample10"),
condition = c("infected", "infected", "infected", "control", "control", "infected", "infected", "infected", "control", "control")
)
design <- ~ condition
dds <- DESeqDataSetFromTximport(txi.kallisto.tsv, colData = colData, design = ~ condition)
coldata <- data.frame(
row.names = c("sample1", "sample2", "sample3", "sample4", "sample5", "sample6", "sample7", "sample8", "sample9", "sample10"),
condition = c("infected", "infected", "infected", "control", "control", "infected", "infected", "infected", "control", "control")
)
design <- ~ condition
dds <- DESeqDataSetFromTximport(txi.kallisto.tsv, colData = coldata, design = ~ condition)
dds <- DESeq(dds)
dds
head(dds)
res <- results(dds, contrast = c("condition", "infected", "control"))
res <- results(dds)
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, log2FoldChange > abs(1.5))
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1.5) %>% arrange(res_sig$log2FoldChange)
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1.5)
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1)
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1.5)
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1)
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 0.5)
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1)
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1) %>%
arrange(desc(log2FoldChange))
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1)
res_sig
res_sig <- res %>% as.data.frame() %>% filter(padj < 0.01, abs(log2FoldChange) > 1) %>%
arrange(desc(log2FoldChange))
res_sig
write.csv(res, file = here("DESeq2-results-raw.csv"))
write.csv(res_sig, file = here("DESeq2_results-sorted.csv"))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("pacman")
#install.packages("tidyverse")
#install.packages("DESeq2")
#install.packages("ashr")
#install.packages("BiocManager")
pacman::p_load("here", "tidyverse", "DESeq2", "ashr")
BiocManager::install("tximport")
library(ggfortify)
vsd <- DESeq2::vst(dds, blind=FALSE)
#as_tibble(assay(vsd))
pcaData <- (as.data.frame(assay(vsd)))
df_long <- pcaData %>%
mutate(Gene = rownames(pcaData)) %>%
pivot_longer(cols = -Gene,
names_to = "Sample",
values_to = "Expression")
df_transposed <- df_long %>%
pivot_wider(names_from = Gene,
values_from = Expression)
rownames(df_transposed) <- df_transposed$Sample
df_transposed$Sample <- NULL
#pcaData
#pcaData_filtered <- t(pcaData[apply(pcaData, 2, function(x) var(x, na.rm = TRUE) > 0), ])
#head(pcaData_filtered)
#pca <- prcomp(df_transposed, scale = FALSE)
#autoplot(pca, data = df_transposed, colour = )
df_transposed$coldata <- coldata$condition
df_transposed$coldata
head(df_transposed)
library(ggfortify)
vsd <- DESeq2::vst(dds, blind=FALSE)
#as_tibble(assay(vsd))
pcaData <- (as.data.frame(assay(vsd)))
df_long <- pcaData %>%
mutate(Gene = rownames(pcaData)) %>%
pivot_longer(cols = -Gene,
names_to = "Sample",
values_to = "Expression")
df_transposed <- df_long %>%
pivot_wider(names_from = Gene,
values_from = Expression)
rownames(df_transposed) <- df_transposed$Sample
df_transposed$Sample <- NULL
df_transposed$coldata <- coldata$condition
df_transposed$coldata
#pcaData
#pcaData_filtered <- t(pcaData[apply(pcaData, 2, function(x) var(x, na.rm = TRUE) > 0), ])
#head(pcaData_filtered)
pca <- prcomp(df_transposed, scale = FALSE)
df_transposed$coldata <- as.data.frame(coldata$condition)
df_transposed$coldata
library(ggfortify)
vsd <- DESeq2::vst(dds, blind=FALSE)
#as_tibble(assay(vsd))
pcaData <- (as.data.frame(assay(vsd)))
df_long <- pcaData %>%
mutate(Gene = rownames(pcaData)) %>%
pivot_longer(cols = -Gene,
names_to = "Sample",
values_to = "Expression")
df_transposed <- df_long %>%
pivot_wider(names_from = Gene,
values_from = Expression)
rownames(df_transposed) <- df_transposed$Sample
df_transposed$Sample <- NULL
#pcaData
#pcaData_filtered <- t(pcaData[apply(pcaData, 2, function(x) var(x, na.rm = TRUE) > 0), ])
#head(pcaData_filtered)
pca <- prcomp(df_transposed, scale = FALSE)
df_transposed$coldata <- as.data.frame(coldata$condition)
df_transposed$coldata
autoplot(pca, data = df_transposed, colour = 'coldata')
library(ggfortify)
vsd <- DESeq2::vst(dds, blind=FALSE)
#as_tibble(assay(vsd))
pcaData <- (as.data.frame(assay(vsd)))
df_long <- pcaData %>%
mutate(Gene = rownames(pcaData)) %>%
pivot_longer(cols = -Gene,
names_to = "Sample",
values_to = "Expression")
df_transposed <- df_long %>%
pivot_wider(names_from = Gene,
values_from = Expression)
rownames(df_transposed) <- df_transposed$Sample
df_transposed$Sample <- NULL
#pcaData
#pcaData_filtered <- t(pcaData[apply(pcaData, 2, function(x) var(x, na.rm = TRUE) > 0), ])
#head(pcaData_filtered)
pca <- prcomp(df_transposed, scale = FALSE)
df_transposed$coldata <- as.data.frame(coldata$condition)
df_transposed$coldata
autoplot(pca, data = df_transposed, colour = 'coldata$condition')
library(ggfortify)
vsd <- DESeq2::vst(dds, blind=FALSE)
#as_tibble(assay(vsd))
pcaData <- (as.data.frame(assay(vsd)))
df_long <- pcaData %>%
mutate(Gene = rownames(pcaData)) %>%
pivot_longer(cols = -Gene,
names_to = "Sample",
values_to = "Expression")
df_transposed <- df_long %>%
pivot_wider(names_from = Gene,
values_from = Expression)
rownames(df_transposed) <- df_transposed$Sample
df_transposed$Sample <- NULL
#pcaData
#pcaData_filtered <- t(pcaData[apply(pcaData, 2, function(x) var(x, na.rm = TRUE) > 0), ])
#head(pcaData_filtered)
pca <- prcomp(df_transposed, scale = FALSE)
df_transposed$coldata <- as.data.frame(coldata)
df_transposed$coldata
autoplot(pca, data = df_transposed, colour = 'coldata$condition')
